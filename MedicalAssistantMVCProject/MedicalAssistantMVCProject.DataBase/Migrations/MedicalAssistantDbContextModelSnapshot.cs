// <auto-generated />
using System;
using MedicalAssistantMVCProject.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalAssistantMVCProject.DataBase.Migrations
{
    [DbContext(typeof(MedicalAssistantDbContext))]
    partial class MedicalAssistantDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Specialisation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VisitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.DoctorPersonalData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId")
                        .IsUnique();

                    b.ToTable("DoctorPersonalData");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.Drug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.DrugCost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrugId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("NumberOfCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TypeOfCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.ToTable("DrugCosts");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.DrugDose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DoseAmount")
                        .HasColumnType("int");

                    b.Property<string>("DoseMeasure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DrugId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.ToTable("DrugsDoses");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.DrugRegimen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrugId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfDosePerTime")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.ToTable("DrugRegimens");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.FirstMedicalAidProtocol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProblemTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProtocolLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FirstMedicalAidProtocols");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.Research", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NormalResultLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Researches");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.ResearchResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ResearchDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ResearchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResearchResultLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResearchId");

                    b.ToTable("ResearchResults");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.Vaccine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGiven")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RevactinationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("VaccinationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VaccineType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.Visit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VisitAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisitResultLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VisitTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.DoctorPersonalData", b =>
                {
                    b.HasOne("MedicalAssistantMVCProject.DataBase.Entities.Doctor", "Doctor")
                        .WithOne("PersonalData")
                        .HasForeignKey("MedicalAssistantMVCProject.DataBase.Entities.DoctorPersonalData", "DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.Drug", b =>
                {
                    b.HasOne("MedicalAssistantMVCProject.DataBase.Entities.User", "User")
                        .WithMany("Drugs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.DrugCost", b =>
                {
                    b.HasOne("MedicalAssistantMVCProject.DataBase.Entities.Drug", "Drug")
                        .WithMany("DrugCosts")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.DrugDose", b =>
                {
                    b.HasOne("MedicalAssistantMVCProject.DataBase.Entities.Drug", "Drug")
                        .WithMany("DrugDoses")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.DrugRegimen", b =>
                {
                    b.HasOne("MedicalAssistantMVCProject.DataBase.Entities.Drug", "Drug")
                        .WithMany("DrugRegimens")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.FirstMedicalAidProtocol", b =>
                {
                    b.HasOne("MedicalAssistantMVCProject.DataBase.Entities.User", "User")
                        .WithMany("FirstMedicalAidProtocols")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.Research", b =>
                {
                    b.HasOne("MedicalAssistantMVCProject.DataBase.Entities.User", "User")
                        .WithMany("Researches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.ResearchResult", b =>
                {
                    b.HasOne("MedicalAssistantMVCProject.DataBase.Entities.Research", "Research")
                        .WithMany("ResearchResults")
                        .HasForeignKey("ResearchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Research");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.Vaccine", b =>
                {
                    b.HasOne("MedicalAssistantMVCProject.DataBase.Entities.User", "User")
                        .WithMany("Vaccines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.Visit", b =>
                {
                    b.HasOne("MedicalAssistantMVCProject.DataBase.Entities.Doctor", "Doctor")
                        .WithMany("Visits")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalAssistantMVCProject.DataBase.Entities.User", "User")
                        .WithMany("Visits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.Doctor", b =>
                {
                    b.Navigation("PersonalData")
                        .IsRequired();

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.Drug", b =>
                {
                    b.Navigation("DrugCosts");

                    b.Navigation("DrugDoses");

                    b.Navigation("DrugRegimens");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.Research", b =>
                {
                    b.Navigation("ResearchResults");
                });

            modelBuilder.Entity("MedicalAssistantMVCProject.DataBase.Entities.User", b =>
                {
                    b.Navigation("Drugs");

                    b.Navigation("FirstMedicalAidProtocols");

                    b.Navigation("Researches");

                    b.Navigation("Vaccines");

                    b.Navigation("Visits");
                });
#pragma warning restore 612, 618
        }
    }
}
